"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import sys, os,datetime
today_editor = "editor/" + datetime.datetime.now().strftime('%Y%m%d')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'i1*0%l#kl3fazffed2*agbthqtuo8+@4f)g=ne=8__89$9^ql_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # 添加人性化过滤器
    'django_tctip', # 提供公告和打赏插件
    'blog',  # 博客
    'tutorial', # 教程
    'comment', # 评论
    'api', # drf API
    'mdeditor',  # 编辑器
    'import_export', # 导入导出
    'oauth',  # 自定义用户应用

    # allauth需要注册的应用
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.weibo',
    'allauth.socialaccount.providers.github',

    'haystack',  # 全文索引
]
# 自定义用户model
AUTH_USER_MODEL = 'oauth.Ouser'
# allauth配置
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# allauth需要的配置
# 当出现"SocialApp matching query does not exist"这种报错的时候就需要更换这个ID
SITE_ID = 1

# 设置登录和注册成功后重定向的页面，默认是/accounts/profile/
LOGIN_REDIRECT_URL = "/"

# Email setting
# imoprt from base_settings more infos
# 禁用注册邮箱验证
ACCOUNT_EMAIL_VERIFICATION = 'none'
# 登录方式，选择用户名或者邮箱都能登录
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
# 设置用户注册的时候必须填写邮箱地址
ACCOUNT_EMAIL_REQUIRED = True
# 登出直接退出，不用确认
ACCOUNT_LOGOUT_ON_GET = True


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# Django 3.0中，X_FRAME_OPTIONS的默认设置从SAMEORIGIN 变成了DENY。
X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = 'website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 设置视图
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'blog.context_processors.settings_info',  # 自定义上下文管理器
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 关闭国际时间，不然数据库报错


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
MEDIA_URL = '/media/'
STATIC_URL = '/static/'
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# 非部署时，debug为True，使用以下代替STATIC_ROOT才能加载上传的图片
else:
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),
    )

# STATIC_ROOT = os.path.join(BASE_DIR, "static")  # 收集静态资源


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加 apps 目录
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# 是否开始[在线工具]应用
TOOL_FLAG = True
# 是否开启[API]应用
API_FLAG = False
# DEBUG模式是否开始的选择
# 值为0：所有平台关闭DEBUG,值为1:所有平台开启DEBUG,值为其他：根据平台类型判断开启（默认设置的Windows下才开启）
DEBUG = True


# 统一分页设置
BASE_PAGE_BY = 10
BASE_ORPHANS = 5


# 全文搜索应用配置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',  # 选择语言解析器为自己更换的结巴分词
        # 保存索引文件的地址，选择主目录下，这个会自动生成
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'



# 使用django-redis缓存页面，缓存配置如下：
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# restframework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20
}

# 邮箱配置
EMAIL_HOST = 'smtp.163.com'
EMAIL_HOST_USER = 'your-email@163.com'
EMAIL_HOST_PASSWORD = 'your-password'  # 这个不是邮箱密码，而是授权码
EMAIL_PORT = 465  # 由于阿里云的25端口打不开，所以必须使用SSL然后改用465端口
# 是否使用了SSL 或者TLS，为了用465端口，要使用这个
EMAIL_USE_SSL = True
# 默认发件人，不设置的话django默认使用的webmaster@localhost，所以要设置成自己可用的邮箱
DEFAULT_FROM_EMAIL = 'your-webname <your-email@163.com>'

# 网站默认设置和上下文信息
SITE_END_TITLE = '网站的名称，如'
SITE_DESCRIPTION = '网站描述'
SITE_KEYWORDS = '网站关键词，多个词用英文逗号隔开'


MDEDITOR_CONFIGS = {
'default':{
    'width': '90%',  # mdedit自定义编辑框宽度
    'heigth': 500,   # 自定义编辑框高度
    'image_folder': today_editor , # 图片保存文件夹名称
    'upload_image_formats': [ "jpg","jpeg", "gif", "png"],  # 图片上传格式类型
    'theme': 'default',  # 编辑框主题 ，dark / default
    'lineWrapping': True,  # 自动换行
    'lineNumbers': True  # 行号
    } 
} 


SIMPLEUI_HOME_INFO = False  # 隐藏simpleui服务器信息
SIMPLEUI_STATIC_OFFLINE = True  # False的时候，默认从第三方的cdn获取加载静态资源 2.1.3或以上的版本


# LOGIN_URL = 'admin/login/'
# LOGIN_REDIRECT_URL = '/'
SIMPLEUI_LOGO = '/static/img/logo.png'
SIMPLEUI_CONFIG = {
    'system_keep': False,
    'menus': [

        {
            'app': 'tutorial',
            'name': '教程',
            'icon': 'icon fa fa-book',
            'models': [
                {
                    'name': '内容',
                    'url': 'tutorial/post/',
                    'icon': 'icon fas fa-book-open'
                },
                {
                    'name': '主题',
                    'url': 'tutorial/topic/',
                    'icon': 'icon fas fa-tags'
                },
            ]
        },

        {
            'app': 'blog',
            'name': '文章',
            'icon': 'icon fa fa-university',
            'models': [
                {
                    'name': '文章',
                    'url': 'blog/article/',
                    'icon': 'icon fas fa-book-open'
                },
                {
                    'name': '分类',
                    'url': 'blog/category/',
                    'icon': 'icon fas fa-list'
                },
                 {
                    'name': '标签',
                    'url': 'blog/tag/',
                    'icon': 'icon fas fa-tags'
                },
                 {
                    'name': '友情链接',
                    'url': 'blog/friendlink/',
                    'icon': 'icon fas fa-link'
                },
                {
                    'name': '图片轮播',
                    'url': 'blog/carousel/',
                    'icon': 'icon fas fa-camera-retro'
                },
            ]
        },

        {
            'app': 'comment',
            'name': '评论',
            'icon': 'icon far fa-comments',
            'models': [

                {
                    'name': '文章评论',
                    'url': 'comment/articlecomment/',
                    'icon': 'icon fas fa-book-open'
                },
                   {
                    'name': '提示信息',
                    'url': 'comment/notification/',
                    'icon': 'icon far fa-comment-dots'
                }


            ]

        },

       
        

        {
            'app': 'account',
            'name': '邮件账号',
            'icon': 'icon fa fa-address-card',
            'models': [
                {
                    'name': 'E-mail地址',
                    'url': 'account/emailaddress/',
                    'icon': 'icon fas fa-map-marker-alt'
                },
            ]
        },


        {
            'app': 'socialaccount',
            'name': '社交账号',
            'icon': 'icon fa fa-puzzle-piece',
            'models': [
                {
                    'name': '社交app',
                    'url': 'socialaccount/socialapp/',
                    'icon': 'icon fa fa-users'
                },
                 {
                    'name': 'token',
                    'url': 'socialaccount/socialtoken/',
                   'icon': 'icon fa fa-code'
                },
                 {
                    'name': 'account',
                    'url': 'socialaccount/socialaccount/',
                    'icon': 'icon fa fa-user'
                },
            ]
        },
        {
              'name': '站点地址',
              'url': 'sites/site/',
              'icon': 'icon fas fa-globe-americas'
        },
       


       {
            'app': 'auth',
            'name': '权限认证',
            'icon': 'fas fa-user-shield',
            'models': [
                {
                    'name': '用户组',
                    'icon': 'fa fa-user-friends',
                    'url': 'auth/group'
                },
                # {
                #     'name': '用户',
                #     'icon': 'fa fa-user',
                #     'url': 'auth/user'
                # }

            ]
        }
      ]        
}
